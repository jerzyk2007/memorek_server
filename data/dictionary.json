[
    {
        "id": 1,
        "question": "array.map",
        "answer": "metoda iterująca po wszystkich elementach tablicy i zwracająca nową tablicę z wynikami przekształceń"
    },
    {
        "id": 2,
        "question": "function",
        "answer": "blok kodu, który można wywołać z innego miejsca programu"
    },
    {
        "id": 3,
        "question": "component",
        "answer": "odizolowana część interfejsu użytkownika, którą można wielokrotnie używać w różnych miejscach aplikacji"
    },
    {
        "id": 4,
        "question": "props",
        "answer": "skrót od 'properties', czyli właściwości przekazywane do komponentów, umożliwiające ich konfigurację"
    },
    {
        "id": 5,
        "question": "state",
        "answer": "stan wewnętrzny komponentu, który może zmieniać się podczas działania aplikacji"
    },
    {
        "id": 6,
        "question": "callback",
        "answer": "funkcja przekazywana jako argument do innej funkcji i wywoływana w odpowiednim momencie"
    },
    {
        "id": 7,
        "question": "arrow function",
        "answer": "skrócona składnia funkcji, która nie tworzy nowego kontekstu 'this' i może być wyrażeniem jednolinijkowym"
    },
    {
        "id": 8,
        "question": "class",
        "answer": "szablon dla obiektów, który umożliwia tworzenie wielu instancji z podobnymi właściwościami i metodami"
    },
    {
        "id": 9,
        "question": "spread operator",
        "answer": "operator '...', który umożliwia rozpakowanie tablic i obiektów do pojedynczych wartości lub właściwości"
    },
    {
        "id": 10,
        "question": "template literal",
        "answer": "składnia do tworzenia łańcuchów znaków, która umożliwia umieszczanie w nich wyrażeń JavaScript"
    },
    {
        "id": 11,
        "question": "destructuring",
        "answer": "składnia umożliwiająca dekompozycję obiektów i tablic na pojedyncze wartości lub właściwości"
    },
    {
        "id": 12,
        "question": "async/await",
        "answer": "składnia umożliwiająca programowanie asynchroniczne w sposób zbliżony do programowania synchronicznego"
    },
    {
        "id": 13,
        "question": "stateless component",
        "answer": "komponent, który nie posiada stanu wewnętrznego (state) i jest całkowicie zależny od przekazywanych mu właściwości (props)"
    },
    {
        "id": 14,
        "question": "closure",
        "answer": "mechanizm pozwalający na tworzenie funkcji wewnętrznych z dostępem do zmiennych z zewnętrznego zakresu"
    },
    {
        "id": 15,
        "question": "hoisting",
        "answer": "proces podnoszenia deklaracji zmiennych i funkcji na początek zakresu ich widoczności"
    },
    {
        "id": 16,
        "question": "immutable",
        "answer": "cecha danych, które nie mogą być modyfikowane po utworzeniu, a jedynie zastępowane nowymi wartościami"
    },
    {
        "id": 17,
        "question": "memoization",
        "answer": "technika optymalizacji, która polega na zapamiętywaniu wyników funkcji dla danych wejściowych i zwracaniu ich bez ponownego wywoływania funkcji"
    },
    {
        "id": 18,
        "question": "pure function",
        "answer": "funkcja, która zawsze zwraca taki sam wynik dla danych wejściowych i nie modyfikuje stanu poza swoim zakresem widoczności"
    },
    {
        "id": 19,
        "question": "promises",
        "answer": "obiekt reprezentujący wartość, która może nie być dostępna w momencie wywołania, ale zostanie zwrócona w przyszłości"
    },
    {
        "id": 20,
        "question": "redux",
        "answer": "biblioteka do zarządzania stanem aplikacji, która umożliwia łatwe tworzenie i przepływ akcji oraz stanu między komponentami"
    },
    {
        "id": 21,
        "question": "useEffect",
        "answer": "hook w React, który umożliwia wykonywanie efektów ubocznych po zmianie stanu komponentu lub po jego zrenderowaniu"
    },
    {
        "id": 22,
        "question": "useState",
        "answer": "hook w React, który umożliwia przechowywanie i aktualizowanie stanu komponentu"
    },
    {
        "id": 23,
        "question": "event",
        "answer": "reakcja na zdarzenie wywołane przez użytkownika lub przez system; przykłady: kliknięcie myszy, przewinięcie strony"
    },
    {
        "id": 24,
        "question": "debugging",
        "answer": "proces wyszukiwania i usuwania błędów w kodzie; często wykorzystuje się narzędzia deweloperskie przeglądarki internetowej"
    },
    {
        "id": 25,
        "question": "callback hell",
        "answer": "sytuacja, w której funkcje zwrotne (callback functions) są zagnieżdżone w innych funkcjach zwrotnych, co utrudnia czytelność i utrzymanie kodu"
    },
    {
        "id": 26,
        "question": "higher-order function",
        "answer": "funkcja, która przyjmuje inną funkcję jako argument lub zwraca funkcję jako wartość"
    },
    {
        "id": 27,
        "question": "context",
        "answer": "obiekt, który określa, w jakim środowisku funkcja  jest wykonywana; w JavaScript najczęściej określa on wartość 'this'"
    }
]